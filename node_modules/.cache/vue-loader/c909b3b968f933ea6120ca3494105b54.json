{"remainingRequest":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yokoyamakenta/Desktop/choco_mart/src/components/comment.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/yokoyamakenta/Desktop/choco_mart/src/components/comment.vue","mtime":1580029870607},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiRiYXNlX2NvbG9yXzE6ICNGRkVBQzg7CiRiYXNlX2NvbG9yXzI6ICNCMUEzQTc7CiRiYXNlX2NvbG9yXzM6ICNFMUNBQkI7CiRiYXNlX2NvbG9yXzQ6ICMxRTJFNTg7CgouY29tbWVudHsKICAmLnRhYmxlLWNob2NvewogICAgcGFkZGluZzogOXB4OwogIH0KICAuaXRlbS10aC1jaG9jb3sKICAgIGJvcmRlci1yYWRpdXM6IDA7CiAgICB3aWR0aDogODBweDsKICAgIGJhY2tncm91bmQ6ICRiYXNlX2NvbG9yXzQ7CiAgfQogIC5pdGVtLXRkLWNob2NvewogICAgYmFja2dyb3VuZC1jb2xvcjogJGJhc2VfY29sb3JfMzsKICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkYmFzZV9jb2xvcl8yOwogICAgcGFkZGluZzogNXB4IDEwcHg7CiAgfQogIC5jaGF0LWNob2NvewogICAgbGlzdC1zdHlsZTogbm9uZTsKICAgIHBhZGRpbmctbGVmdDogMDsKICAgIG1hcmdpbi10b3A6IDEycHg7CiAgICBmb250LWZhbWlseTogImNob2NvIjsKICAgIGZvbnQtc2l6ZTogMTRweDsKICAgIC8vIG1hcmdpbi1ib3R0b206IDgwcHg7CiAgICAubXNnewogICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRTFDQUJCOwogICAgfQogIH0KICAuaXRlbS10YWJsZS1jaG9jb3sKICAgIGJvcmRlcjogMXB4IHNvbGlkICRiYXNlX2NvbG9yXzI7CiAgICBib3JkZXItcmFkaXVzOiA3cHg7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgdHJ7CiAgICAgICY6Zmlyc3Qtb2YtdHlwZXsKICAgICAgICB0ZHsKICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDcwcHg7CiAgICAgICAgfQogICAgICB9CiAgICAgICY6bGFzdC1vZi10eXBlewogICAgICAgIHRkewogICAgICAgICAgYm9yZGVyOiAwOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KICAuaXRlbS1pbnB1dC1jaG9jb3sKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICYuY2hhdC1pbnB1dC1jaG9jb3sKCiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["comment.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+NA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"comment.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div class=\"comment table-choco\" ref=\"comment_table\">\n      <table class=\"item-table-choco back-choco body-2\" cellspacing=\"0\">\n        <tr>\n          <th class=\"item-th-choco text-choco body-2\">\n            <template v-if=\"kind == 'lists'\">装備名</template>\n            <template v-else-if=\"kind == 'talks'\">タイトル</template>\n          </th>\n          <td class=\"item-td-choco text-choco-dark\">{{name}}</td>\n        </tr>\n        <tr v-if=\"price\">\n          <th class=\"item-th-choco text-choco body-2\">\n            <span v-if=\"type == 1\">買い価格</span>\n            <span v-else-if=\"type == 2\">売り価格</span>\n            <span v-else>価格</span>\n          </th>\n          <td class=\"item-td-choco text-choco-dark\">{{price}}</td>\n        </tr>\n        <tr>\n          <th class=\"item-th-choco text-choco body-2\">作成者</th>\n          <td class=\"item-td-choco text-choco-dark\">{{members[uid] ? members[uid][\"name\"] : \"\"}}</td>\n        </tr>\n        <tr>\n          <th class=\"item-th-choco text-choco body-2\">作成日</th>\n          <td class=\"item-td-choco text-choco-dark\">{{created_at}}</td>\n        </tr>\n      </table>\n      <ul class=\"chat-choco oneArea\">\n        <li v-for=\"(content,index) in reply\" :key=\"index\" class=\"onebox\" :class=\"{'owner': content.uid == uid, 'myself': content.uid == user.uid,'member': content.uid != user.uid}\">\n          <div class=\"fukiArea\">\n            <div class=\"fukidasi\">\n              <p v-html=\"content.msg\" class=\"text-normal\"></p>\n              <p class=\"member_name\">{{members[content.uid] ? members[content.uid][\"name\"] : \"\"}}</p>\n            </div>\n            <p class=\"msg_time\">{{getFormatedDate(content.created_at)}}</p>\n          </div>\n        </li>\n      </ul>\n      <v-row justify=\"center\">\n        <v-dialog\n          v-model=\"chat.isShow\"\n          max-width=\"500\"\n          width=\"90%\"\n        >\n          <div class=\"modal-choco\">\n            <div class=\"head text-choco pl-2 body-2\">comment</div>\n            <div class=\"body text-choco-dark pa-2 mt-3 modal-textarea-choco\">\n              <v-textarea\n                outlined\n                label=\"返信..\"\n                v-model=\"chat.value\"\n                no-resize\n                height=\"180px\"\n                class=\"text-normal\"\n              ></v-textarea>\n            </div>\n            <div class=\"footer\">\n              <v-btn color=\"#487DF6\" class=\"button-choco\" :class=\"{'pointer-none': chat.isClicked}\" dark @click=\"sendChat()\">\n                <span>書き込む</span>\n              </v-btn>\n              <v-btn color=\"#487DF6\" class=\"button-choco\" dark @click=\"chat.isShow = false\">\n                <span>閉じる</span>\n              </v-btn>\n            </div>\n          </div>\n        </v-dialog>\n      </v-row>\n    </div>\n    <div class=\"panel-choco\">\n      <v-btn class=\"ma-2 good\" dark color=\"deep-orange darken-2\" @click=\"sendGood()\">\n        <v-icon dark left>mdi-thumb-up</v-icon>{{good}}\n      </v-btn>\n      <v-btn class=\"mx-2 back\" fab dark small color=\"#1E2E58\" @click=\"$emit('closeReply'); closeListener()\">\n        <v-icon dark>mdi-undo</v-icon>\n      </v-btn>\n      <v-btn class=\"mx-2 write\" fab dark small color=\"#1E2E58\" @click=\"chat.isShow = true\">\n        <v-icon dark>mdi-pencil</v-icon>\n      </v-btn>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapGetters, mapMutations, mapActions } from 'vuex'\nimport firebase from 'firebase'\nimport firebaseConfig from '@/plugins/firebase'\nimport '@/assets/scss/chat.scss'\n\nexport default {\n  data () {\n    return {\n      notices: null,\n      kind: \"lists\",\n      itemId: \"\",\n      name: \"\",\n      price: \"\",\n      uid: \"\",\n      type: \"\",\n      good: 0,\n      reply: [],\n      created_at: \"\",\n      chat: {\n        value: \"\",\n        isShow: false,\n        isClicked: false\n      },\n      members: {\n      },\n      listener: null\n    }\n  },\n  methods: {\n    setKind(kind) {\n      this.kind = kind\n    },\n    init(itemId) {\n      let t = this\n      t.listener = firebase.firestore().collection(\"comments\").doc(itemId).onSnapshot(function (querySnapshot) {\n        t.refresh(itemId)\n        t.refreshNotice(t.user.uid)\n      })\n    },\n    closeListener() {\n      this.listener()\n    },\n    async sendGood(){\n      let noticeRef = this.db.collection(\"notices\").doc(this.user.uid)\n      let msgRef = this.db.collection(\"comments\").doc(this.itemId)\n      let listRef = this.db.collection(\"lists\").doc(this.itemId)\n\n      let now = firebase.firestore.FieldValue.serverTimestamp()\n\n      let msgData = {\n        updated_at: now,\n        good: firebase.firestore.FieldValue.increment(1)\n      }\n      await noticeRef.update({\n        items: firebase.firestore.FieldValue.arrayUnion(listRef)\n      })\n      await msgRef.update({\n         ...msgData \n      })\n    },\n    async refreshNotice(){\n      let noticeRef = await firebase.firestore().collection(\"notices\").doc(this.user.uid)\n      let noticeData = await noticeRef.get()\n      this.notices = noticeData.data()\n      // console.log(this.notices)\n    },\n    async refresh(itemId){\n      let t = this\n\n      let commentData = await this.RefreshCommentList(itemId)\n      let itemRef = await firebase.firestore().collection(this.kind).doc(commentData.item.id)\n      let itemData = await itemRef.get()\n\n      for(let content of commentData.reply){\n        if(!this.members[content.uid]){\n          this.members[content.uid] = await this.GetUserById(content.uid)\n        }\n      }\n\n      // 更新\n      this.itemId = itemData.data().id\n      this.uid = itemData.data().uid\n      this.type = itemData.data().type\n      this.reply = commentData.reply\n      this.good = commentData.good\n      this.created_at = this.getFormatedDate(itemData.data().created_at.seconds)\n      this.chat = {\n        value: this.chat.value,\n        isShow: this.chat.isShow,\n        isClicked: false\n      }\n      if(this.kind == \"lists\"){\n        this.name = itemData.data().name\n        this.price = itemData.data().price\n      }else if(this.kind == \"talks\"){\n        this.name = itemData.data().title\n        this.price = null\n      }\n      this.scrollTo(this.$refs.comment_table,\"bottom\",600)\n    },\n    async sendChat(){\n      if(!this.chat.value) return\n      this.chat.isClicked = true\n      let now = firebase.firestore.FieldValue.serverTimestamp()\n      let msgRef = firebase.firestore().collection(\"comments\").doc(this.itemId)\n      let listRef = this.db.collection(this.kind).doc(this.itemId)\n      let msgData = {\n        uid: this.user.uid,\n        msg: this.chat.value,\n        created_at: Math.floor( new Date().getTime() / 1000 )\n      }\n      let itemData = {\n        updated_at: now,\n        reply: firebase.firestore.FieldValue.increment(1)\n      }\n      await msgRef.update({\n        reply: firebase.firestore.FieldValue.arrayUnion(msgData)\n      });\n      await listRef.update({\n         ...itemData \n      })\n      // this.refresh(this.itemId)\n      this.isShow = false\n      this.chat.value = \"\"\n      this.chat.isShow = false\n      this.chat.isClicked = false\n    },\n  },\n  computed: {\n    ...mapGetters({\n      user: 'auth/user',\n    }),\n  },\n  mounted(){\n  }\n}\n</script>\n\n<style lang=\"scss\">\n$base_color_1: #FFEAC8;\n$base_color_2: #B1A3A7;\n$base_color_3: #E1CABB;\n$base_color_4: #1E2E58;\n\n.comment{\n  &.table-choco{\n    padding: 9px;\n  }\n  .item-th-choco{\n    border-radius: 0;\n    width: 80px;\n    background: $base_color_4;\n  }\n  .item-td-choco{\n    background-color: $base_color_3;\n    border-bottom: 1px solid $base_color_2;\n    padding: 5px 10px;\n  }\n  .chat-choco{\n    list-style: none;\n    padding-left: 0;\n    margin-top: 12px;\n    font-family: \"choco\";\n    font-size: 14px;\n    // margin-bottom: 80px;\n    .msg{\n      background-color: #E1CABB;\n    }\n  }\n  .item-table-choco{\n    border: 1px solid $base_color_2;\n    border-radius: 7px;\n    overflow: hidden;\n    tr{\n      &:first-of-type{\n        td{\n          padding-right: 70px;\n        }\n      }\n      &:last-of-type{\n        td{\n          border: 0;\n        }\n      }\n    }\n  }\n  .item-input-choco{\n    position: relative;\n    &.chat-input-choco{\n\n    }\n  }\n}\n</style>"]}]}