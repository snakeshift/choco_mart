{"remainingRequest":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yokoyamakenta/Desktop/choco_mart/src/components/talk.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/yokoyamakenta/Desktop/choco_mart/src/components/talk.vue","mtime":1581428880243},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiRiYXNlX2NvbG9yXzE6ICNGRkVBQzg7CiRiYXNlX2NvbG9yXzI6ICNCMUEzQTc7CiRiYXNlX2NvbG9yXzM6ICNFMUNBQkI7CiRiYXNlX2NvbG9yXzQ6ICMxRTJFNTg7CgoudGFsa3sKICAmPmRpdnsKICAgIHBhZGRpbmc6IDlweDsKICAgIHBhZGRpbmctYm90dG9tOiAwOwogICAgdGFibGV7CiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICRiYXNlX2NvbG9yXzI7CiAgICAgIGJvcmRlci1yYWRpdXM6IDdweDsKICAgIH0KICB9CiAgLml0ZW0tdGFibGUtY2hvY297CiAgICAvLyBvdmVyZmxvdzogaGlkZGVuOwogICAgdGJvZHl7CiAgICAgIGJhY2tncm91bmQtY29sb3I6ICRiYXNlX2NvbG9yXzM7CiAgICB9CiAgfQogIC5pdGVtLXRoLWNob2NvewogICAgdGh7CiAgICAgICY6Zmlyc3Qtb2YtdHlwZXsKICAgICAgICB3aWR0aDogMjIwcHg7CiAgICAgIH0KICAgICAgJjpudGgtb2YtdHlwZSgyKXsKICAgICAgICB3aWR0aDogNzBweDsKICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0OwogICAgICB9CiAgICAgICY6bGFzdC1vZi10eXBlewogICAgICB9CiAgICB9CiAgfQogIC5pdGVtLXRkLWNob2NvewogICAgdGR7CiAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjQjFBM0E3OwogICAgICAmOmZpcnN0LW9mLXR5cGV7CiAgICAgICAgZGl2ewogICAgICAgICAgc3BhbnsKICAgICAgICAgICAgJjpsYXN0LW9mLXR5cGV7CiAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDJweDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICAmOm50aC1vZi10eXBlKDIpewogICAgICAgIGRpdnsKICAgICAgICAgIHNwYW57CiAgICAgICAgICAgIHBhZGRpbmctdG9wOiAycHg7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgICY6bGFzdC1vZi10eXBlewogICAgICAgIGRpdnsKICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgJjpsYXN0LW9mLXR5cGV7CiAgICAgIHRkewogICAgICAgIGJvcmRlci1ib3R0b206IDA7CiAgICAgIH0KICAgIH0KICB9CiAgLml0ZW0tdHlwZS1jaG9jb3sKICAgICY+YnV0dG9uewogICAgICAvLyB3aWR0aDogNDVweDsKICAgICAgLy8gbWluLXdpZHRoOiA0NXB4ICFpbXBvcnRhbnQ7CiAgICB9CiAgfQogIC5pdGVtLWlucHV0LWNob2NvewogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgICBoZWlnaHQ6IDM1cHg7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgIC5jaGlwewogICAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICAgIHRvcDogOXB4OwogICAgICBsZWZ0OiA2cHg7CiAgICAgIGhlaWdodDogMThweDsKICAgICAgcGFkZGluZy1sZWZ0OiAxMHB4OwogICAgICBwYWRkaW5nLXJpZ2h0OiAxMHB4OwogICAgICBsZXR0ZXItc3BhY2luZzogMHB4ICFpbXBvcnRhbnQ7CiAgICAgIGZvbnQtc2l6ZTogMTNweCAhaW1wb3J0YW50OwogICAgICBvdmVyZmxvdzogdmlzaWJsZTsKICAgIH0KICAgIGlucHV0ewogICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKICAgICAgaGVpZ2h0OiAzNXB4OwogICAgfQogIH0KfQo="},{"version":3,"sources":["talk.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiSA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"talk.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div class=\"table-choco talk\" ref=\"talk_table\">\n      <div>\n        <table class=\"item-table-choco back-choco\" cellspacing=\"0\">\n          <thead>\n            <tr class=\"item-th-choco text-choco body-2\">\n              <th>タイトル名</th>\n              <th>投稿者</th>\n              <th>返</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(item,index) in sortedItems\" :key=\"index\" class=\"item-td-choco text-choco pointer\" @click=\"$emit('showReply', item.id, 'talks')\">\n              <td>\n                <div class=\"item-input-choco\">\n                  <v-chip dark :color=\"TALK_TYPE_COLOR[item.type]\" x-small class=\"chip\">{{TALK_TYPE[item.type]}}</v-chip>\n                  <span type=\"text\" class=\"text-choco-dark pl-12\">\n                    <template v-if=\"$vuetify.breakpoint.xs\">\n                      {{trimText(item.title,12)}}\n                    </template>\n                    <template v-else>\n                      {{trimText(item.title,30)}}\n                    </template>                  \n                  </span>\n                </div>\n              </td>\n              <td>\n                <div class=\"item-input-choco\">\n                  <span class=\"text-choco-dark\">{{trimText(item.name,5)}}</span>\n                </div>\n              </td>\n              <td>\n                <div class=\"item-input-choco\">\n                  <span class=\"text-choco-dark link pointer\">{{item.reply}}</span>\n                </div>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <v-row justify=\"center\">\n        <v-dialog\n          v-model=\"dialog.isShow\"\n          max-width=\"290\"\n        >\n          <div class=\"modal-choco\">\n            <div class=\"head text-choco pl-2 body-2\">\n              {{dialog.title}}\n            </div>\n            <div class=\"body text-choco-dark pa-2\">\n              <p v-html=\"dialog.content\"></p>\n            </div>\n            <div class=\"footer\">\n              <button v-if=\"dialog.button.positive.isShow\" @click=\"dialog.button.positive.func()\">OK</button>\n              <button v-if=\"dialog.button.negative.isShow\" @click=\"dialog.button.negative.func()\">キャンセル</button>\n            </div>\n          </div>\n        </v-dialog>\n      </v-row>\n      <ul class=\"pager\">\n        <li v-for=\"n in getPageIndex\" :key=\"n\" class=\"pager_li\" @click=\"changePage(n)\">\n          <template v-if=\"pageSetting.index == n\">\n            <v-icon color=\"primary\">mdi-numeric-{{n}}-box</v-icon>\n          </template>\n          <template v-else>\n            <v-icon>mdi-numeric-{{n}}-box</v-icon>\n          </template>\n        </li>\n      </ul>\n    </div>\n      <v-row justify=\"center\">\n        <v-dialog\n          v-model=\"chat.isShow\"\n          max-width=\"500\"\n          width=\"90%\"\n        >\n          <div class=\"modal-choco\" style=\"height: 445px;\">\n            <div class=\"head text-choco pl-2 body-2\">スレッド作成</div>\n            <div class=\"body text-choco-dark pa-2 mt-3 modal-textarea-choco\">\n              <v-row>\n                <v-col cols=\"5\" class=\"pt-0 pb-0\">\n                  <v-select\n                    v-model=\"chat.selectedType\"\n                    :items=\"types\"\n                    item-text=\"text\"\n                    item-value=\"value\"\n                    label=\"種別\"\n                    outlined\n                    class=\"mb-4\"\n                  ></v-select>\n                </v-col>\n              </v-row>\n              <v-text-field\n                label=\"タイトル..\"\n                v-model=\"chat.title\"\n                outlined\n                class=\"mb-4 text-choco-dark body\"\n              ></v-text-field>\n              <v-textarea\n                outlined\n                label=\"内容..\"\n                v-model=\"chat.content\"\n                no-resize\n                height=\"180px\"\n                class=\"text-choco-dark body\"\n              ></v-textarea>\n            </div>\n            <div class=\"footer\">\n              <v-btn color=\"#487DF6\" class=\"button-choco\" :class=\"{'pointer-none': chat.isClicked}\" dark @click=\"sendChat()\">\n                <span>作成</span>\n              </v-btn>\n              <v-btn color=\"#487DF6\" class=\"button-choco\" dark @click=\"chat.isShow = false\">\n                <span>閉じる</span>\n              </v-btn>\n            </div>\n          </div>\n        </v-dialog>\n      </v-row>\n    <div class=\"panel-choco\">\n      <v-btn class=\"mx-2 write\" fab dark small color=\"#1E2E58\" @click=\"chat.isShow = true\">\n        <v-icon dark>mdi-pencil</v-icon>\n      </v-btn>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapGetters, mapMutations, mapActions } from 'vuex'\nimport firebase from 'firebase'\n\nexport default {\n  data () {\n    return {\n      dialog: {\n        isShow: false,\n        title: \"\",\n        content: \"\",\n        button: {\n          positive: {\n            isShow: false,\n            func(){\n\n            }\n          },\n          negative: {\n            isShow: false,\n            func(){\n\n            }\n          }\n        },\n      },\n      count: 0,\n      items: {},\n      pageSetting: {\n        index: 1,\n        interval: 21\n      },\n      types: [\n        {value: 1, text: \"雑談\"},\n        {value: 2, text: \"代行\"},\n        {value: 3, text: \"募集\"},\n        {value: 4, text: \"その他\"}\n      ],\n      chat: {\n        selectedType: 1,\n        title: \"\",\n        content: \"\",\n        isShow: false,\n        isClicked: false\n      },\n    }\n  },\n  methods: {\n    async refresh(){\n      let t =this\n      let talkRef = t.db.collection(\"talks\")\n      await talkRef.orderBy(\"updated_at\", \"desc\").limit(200).get().then(function(querySnapshot) {\n        querySnapshot.forEach(function(doc) {\n          t.$set(t.items, doc.id, doc.data())\n        });\n      });\n    },\n    async init(){\n      let t = this\n      let talkRef = t.db.collection(\"talks\")\n      await talkRef.orderBy(\"updated_at\", \"desc\").limit(1).onSnapshot(function (querySnapshot) {\n        querySnapshot.forEach(function(doc) {\n          t.$set(t.items, doc.id, doc.data())\n        });\n      })\n    },\n    changePage(index){\n      this.pageSetting.index = index\n      this.scrollTo(this.$refs.talk_table,\"top\",100)\n    },\n    async sendChat(){\n      if(!this.chat.title || !this.chat.content) return\n      this.chat.isClicked = true\n      let now = firebase.firestore.FieldValue.serverTimestamp()\n      let today = Math.floor( new Date().getTime() / 1000 )\n\n      let itemId = this.db.collection(\"talks\").doc().id\n\n      let talkRef = this.db.collection(\"talks\").doc(itemId)\n      let msgRef = this.db.collection(\"comments\").doc(itemId)\n      let name = (this.user.displayName) ? this.user.displayName : \"名も無き冒険者\"\n\n      // スレッドデータ\n      let itemData = {\n        id: itemId,\n        uid: this.user.uid,\n        status: 1,\n        title: this.chat.title,\n        name: name,\n        type: this.chat.selectedType,\n        reply: 1,\n        updated_at: now,\n        created_at: now\n      }\n      // コメント構造\n      let msgData = {\n        item: talkRef,\n        reply: [\n          {\n            uid: this.user.uid,\n            msg: this.chat.content,\n            created_at: today\n          }\n        ],\n        good: 0,\n        created_at: now,\n        updated_at: now\n      }\n\n      // 販売リスト更新(全体)\n      await talkRef.set({ ...itemData })\n      // スレッド作成\n      await msgRef.set({ ...msgData })\n\n      this.chat.isShow = false\n      this.chat.isClicked = false\n      this.chat.title = \"\"\n      this.chat.content = \"\"\n      this.chat.type = 1\n    }\n  },\n  computed: {\n    ...mapGetters({\n      user: 'auth/user',\n    }),\n    sortedItems() {\n      let sorted = {};\n      let array = [];\n      let t = this\n\n      for (let key in t.items) { array.push(key);}\n      array.sort(function(a,b){\n        if(t.items[a].updated_at && t.items[b].updated_at) {\n          return (t.items[a].updated_at.seconds < t.items[b].updated_at.seconds) ? 1 : -1\n        }\n      });\n\n      // 現在のページindexから、何件分のアイテムを表示するか決定\n      let itemCount = array.length\n      let start = this.pageSetting.index * this.pageSetting.interval - this.pageSetting.interval\n      let end = this.pageSetting.index * this.pageSetting.interval - 1\n      if(itemCount < end){\n        end = itemCount\n      }\n\n      for (let i = start; i < end; i++) {\n        sorted[array[i]] = t.items[array[i]];\n      }\n      return sorted\n    },\n    getPageIndex(){\n      return Math.ceil(Object.keys(this.items).length/this.pageSetting.interval)\n    }\n  },\n  mounted(){\n    this.refresh()\n    this.init()\n  }\n}\n</script>\n\n<style lang=\"scss\">\n$base_color_1: #FFEAC8;\n$base_color_2: #B1A3A7;\n$base_color_3: #E1CABB;\n$base_color_4: #1E2E58;\n\n.talk{\n  &>div{\n    padding: 9px;\n    padding-bottom: 0;\n    table{\n      border: 1px solid $base_color_2;\n      border-radius: 7px;\n    }\n  }\n  .item-table-choco{\n    // overflow: hidden;\n    tbody{\n      background-color: $base_color_3;\n    }\n  }\n  .item-th-choco{\n    th{\n      &:first-of-type{\n        width: 220px;\n      }\n      &:nth-of-type(2){\n        width: 70px;\n        text-align: left;\n      }\n      &:last-of-type{\n      }\n    }\n  }\n  .item-td-choco{\n    td{\n      border-bottom: 1px solid #B1A3A7;\n      &:first-of-type{\n        div{\n          span{\n            &:last-of-type{\n              padding-top: 2px;\n            }\n          }\n        }\n      }\n      &:nth-of-type(2){\n        div{\n          span{\n            padding-top: 2px;\n          }\n        }\n      }\n      &:last-of-type{\n        div{\n          justify-content: center;\n        }\n      }\n    }\n    &:last-of-type{\n      td{\n        border-bottom: 0;\n      }\n    }\n  }\n  .item-type-choco{\n    &>button{\n      // width: 45px;\n      // min-width: 45px !important;\n    }\n  }\n  .item-input-choco{\n    position: relative;\n    background-color: transparent;\n    height: 35px;\n    display: flex;\n    align-items: center;\n    .chip{\n      position: absolute;\n      top: 9px;\n      left: 6px;\n      height: 18px;\n      padding-left: 10px;\n      padding-right: 10px;\n      letter-spacing: 0px !important;\n      font-size: 13px !important;\n      overflow: visible;\n    }\n    input{\n      background-color: transparent;\n      height: 35px;\n    }\n  }\n}\n</style>"]}]}