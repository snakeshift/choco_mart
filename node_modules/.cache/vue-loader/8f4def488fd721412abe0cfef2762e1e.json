{"remainingRequest":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yokoyamakenta/Desktop/choco_mart/src/components/buy.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yokoyamakenta/Desktop/choco_mart/src/components/buy.vue","mtime":1580029870606},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yokoyamakenta/Desktop/choco_mart/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcFN0YXRlLCBtYXBHZXR0ZXJzLCBtYXBNdXRhdGlvbnMsIG1hcEFjdGlvbnMgfSBmcm9tICd2dWV4JwppbXBvcnQgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UnCmltcG9ydCBmaXJlYmFzZUNvbmZpZyBmcm9tICdAL3BsdWdpbnMvZmlyZWJhc2UnCgpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YSAoKSB7CiAgICByZXR1cm4gewogICAgICBkaWFsb2c6IHsKICAgICAgICBpc1Nob3c6IGZhbHNlLAogICAgICAgIHRpdGxlOiAiIiwKICAgICAgICBjb250ZW50OiAiIiwKICAgICAgICBidXR0b246IHsKICAgICAgICAgIHBvc2l0aXZlOiB7CiAgICAgICAgICAgIGlzU2hvdzogZmFsc2UsCiAgICAgICAgICAgIGlzQ2xpY2tlZDogZmFsc2UsCiAgICAgICAgICAgIGZ1bmMoKXsKCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBuZWdhdGl2ZTogewogICAgICAgICAgICBpc1Nob3c6IGZhbHNlLAogICAgICAgICAgICBmdW5jKCl7CgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgfSwKICAgICAgY291bnQ6IDAsCiAgICAgIGl0ZW1zOiB7fQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgc2V0U3RhdHVzKGluZGV4LGl0ZW0pewogICAgICBzd2l0Y2goaXRlbS5zdGF0dXMpewogICAgICAgIGNhc2UoMSk6IHsKICAgICAgICAgIHRoaXMuZGlhbG9nLnRpdGxlID0gIm5vdGljZSIKICAgICAgICAgIGlmKHRoaXMuaXNfZW1wdHkoaXRlbS5uYW1lKSB8fCB0aGlzLmlzX2VtcHR5KGl0ZW0ucHJpY2UpKXsKICAgICAgICAgICAgdGhpcy5kaWFsb2cuY29udGVudCA9IGAKICAgICAgICAgICAgPHA+5rGC44KB44KL6KOF5YKZ5ZCN44CB5L6h5qC844KS5q2j44GX44GP5YWl5Yqb44GX44Gm44GP44Gg44GV44GE44CCPC9wPgogICAgICAgICAgICBgCiAgICAgICAgICAgIC8vIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgLy8gICA8aW1nIHNyYz0iJHtyZXF1aXJlKCdAL2Fzc2V0cy9pbWdzL2JlcnVkZS5wbmcnKX0iIGhlaWdodD0iMTAwcHgiPgogICAgICAgICAgICAvLyA8L2Rpdj4KICAgICAgICAgICAgdGhpcy5kaWFsb2cuYnV0dG9uLnBvc2l0aXZlLmlzU2hvdyA9IGZhbHNlCiAgICAgICAgICAgIHRoaXMuZGlhbG9nLmJ1dHRvbi5uZWdhdGl2ZS5pc1Nob3cgPSB0cnVlCiAgICAgICAgICAgIHRoaXMuZGlhbG9nLmJ1dHRvbi5uZWdhdGl2ZS5mdW5jID0gKCkgPT4gewogICAgICAgICAgICAgIHRoaXMuZGlhbG9nLmlzU2hvdyA9IGZhbHNlCiAgICAgICAgICAgIH0KICAgICAgICAgIH1lbHNlewogICAgICAgICAgICB0aGlzLmRpYWxvZy5jb250ZW50ID0gYOOAkCR7aXRlbS5uYW1lfeOAkeOCkiR7aXRlbS5wcmljZX08YnI+44Gn5rGC44KB44G+44GZ44CC44KI44KN44GX44GE44Gn44GZ44GLP2AKICAgICAgICAgICAgdGhpcy5kaWFsb2cuYnV0dG9uLnBvc2l0aXZlLmlzU2hvdyA9IHRydWUKICAgICAgICAgICAgdGhpcy5kaWFsb2cuYnV0dG9uLm5lZ2F0aXZlLmlzU2hvdyA9IHRydWUKCiAgICAgICAgICAgIGxldCBpdGVtSWQgPSB0aGlzLmRiLmNvbGxlY3Rpb24oImxpc3RzIikuZG9jKCkuaWQKCiAgICAgICAgICAgIGxldCBub3cgPSBmaXJlYmFzZS5maXJlc3RvcmUuRmllbGRWYWx1ZS5zZXJ2ZXJUaW1lc3RhbXAoKQogICAgICAgICAgICBsZXQgdG9kYXkgPSBNYXRoLmZsb29yKCBuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDAgKQoKICAgICAgICAgICAgbGV0IGJ1eVJlZiA9IHRoaXMuZGIuY29sbGVjdGlvbigiYnV5cyIpLmRvYyh0aGlzLnVzZXIudWlkKQogICAgICAgICAgICBsZXQgbGlzdFJlZiA9IHRoaXMuZGIuY29sbGVjdGlvbigibGlzdHMiKS5kb2MoaXRlbUlkKQogICAgICAgICAgICBsZXQgbXNnUmVmID0gdGhpcy5kYi5jb2xsZWN0aW9uKCJjb21tZW50cyIpLmRvYyhpdGVtSWQpCgogICAgICAgICAgICB0aGlzLmRpYWxvZy5idXR0b24ucG9zaXRpdmUuZnVuYyA9IGFzeW5jICgpID0+IHsKICAgICAgICAgICAgICB0aGlzLmRpYWxvZy5idXR0b24ucG9zaXRpdmUuaXNDbGlja2VkID0gdHJ1ZQoKICAgICAgICAgICAgICAvLyDllYblk4Hjg4fjg7zjgr8KICAgICAgICAgICAgICBsZXQgaXRlbURhdGEgPSB7CiAgICAgICAgICAgICAgICBpZDogaXRlbUlkLAogICAgICAgICAgICAgICAgdWlkOiB0aGlzLnVzZXIudWlkLAogICAgICAgICAgICAgICAgc3RhdHVzOiAyLAogICAgICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lLAogICAgICAgICAgICAgICAgcHJpY2U6IGl0ZW0ucHJpY2UsCiAgICAgICAgICAgICAgICB0eXBlOiAxLAogICAgICAgICAgICAgICAgcmVwbHk6IDEsCiAgICAgICAgICAgICAgICB1cGRhdGVkX2F0OiBub3csCiAgICAgICAgICAgICAgICBjcmVhdGVkX2F0OiBub3cKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgLy8g44Kz44Oh44Oz44OI5qeL6YCgCiAgICAgICAgICAgICAgbGV0IG1zZ0RhdGEgPSB7CiAgICAgICAgICAgICAgICBpdGVtOiBsaXN0UmVmLAogICAgICAgICAgICAgICAgcmVwbHk6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHVpZDogdGhpcy51c2VyLnVpZCwKICAgICAgICAgICAgICAgICAgICBtc2c6ICLlj5blvJXjgpLplovlp4vjgZfjgb7jgZfjgZ/jgIIiLAogICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRfYXQ6IHRvZGF5CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBnb29kOiAwLAogICAgICAgICAgICAgICAgY3JlYXRlZF9hdDogbm93LAogICAgICAgICAgICAgICAgdXBkYXRlZF9hdDogbm93CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB0aGlzLml0ZW1zW2luZGV4XSA9IHsKICAgICAgICAgICAgICAgIGlkOiBpdGVtSWQsCiAgICAgICAgICAgICAgICBzdGF0dXM6IDIsCiAgICAgICAgICAgICAgICBuYW1lOiBpdGVtLm5hbWUsCiAgICAgICAgICAgICAgICBwcmljZTogaXRlbS5wcmljZSwKICAgICAgICAgICAgICAgIHJlcGx5OiAxLAogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgLy8g6LKp5aOy44Oq44K544OI5pu05pawKOWAi+S6uikKICAgICAgICAgICAgICBhd2FpdCBidXlSZWYudXBkYXRlKHsKICAgICAgICAgICAgICAgIFsnaXRlbXMuJyArIGluZGV4XTogbGlzdFJlZgogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgLy8g6LKp5aOy44Oq44K544OI5pu05pawKOWFqOS9kykKICAgICAgICAgICAgICBhd2FpdCBsaXN0UmVmLnNldCh7IC4uLml0ZW1EYXRhIH0pCiAgICAgICAgICAgICAgLy8g44K544Os44OD44OJ5L2c5oiQCiAgICAgICAgICAgICAgYXdhaXQgbXNnUmVmLnNldCh7IC4uLm1zZ0RhdGEgfSkKICAgICAgICAgICAgICAvLyDjg6rjgrnjg4rjg7znmbvpjLIKICAgICAgICAgICAgICB0aGlzLnNldExpc3RMaXN0ZW5lcihpdGVtSWQpCiAgICAgICAgICAgICAgdGhpcy5kaWFsb2cuaXNTaG93ID0gZmFsc2UKCiAgICAgICAgICAgICAgdGhpcy5kaWFsb2cuYnV0dG9uLnBvc2l0aXZlLmlzQ2xpY2tlZCA9IGZhbHNlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5kaWFsb2cuYnV0dG9uLm5lZ2F0aXZlLmZ1bmMgPSAoKSA9PiB7CiAgICAgICAgICAgICAgdGhpcy5kaWFsb2cuaXNTaG93ID0gZmFsc2UKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgdGhpcy5kaWFsb2cuaXNTaG93ID0gdHJ1ZQogICAgICAgICAgYnJlYWsKICAgICAgICB9CgogICAgICAgIGNhc2UoMik6IHsKICAgICAgICAgIHRoaXMuZGlhbG9nLnRpdGxlID0gIm5vdGljZSIKICAgICAgICAgIHRoaXMuZGlhbG9nLmNvbnRlbnQgPSBg44CQJHtpdGVtLm5hbWV944CR44Gu5Y+W5byV44KS57eg44KB5YiH44KK44G+44GZ44CCPGJyPuOCiOOCjeOBl+OBhOOBp+OBmeOBiz9gCiAgICAgICAgICB0aGlzLmRpYWxvZy5idXR0b24ucG9zaXRpdmUuaXNTaG93ID0gdHJ1ZQogICAgICAgICAgdGhpcy5kaWFsb2cuYnV0dG9uLm5lZ2F0aXZlLmlzU2hvdyA9IHRydWUKCiAgICAgICAgICBsZXQgbm93ID0gZmlyZWJhc2UuZmlyZXN0b3JlLkZpZWxkVmFsdWUuc2VydmVyVGltZXN0YW1wKCkKICAgICAgICAgIGxldCB0b2RheSA9IE1hdGguZmxvb3IoIG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCApCgogICAgICAgICAgbGV0IGJ1eVJlZiA9IHRoaXMuZGIuY29sbGVjdGlvbigiYnV5cyIpLmRvYyh0aGlzLnVzZXIudWlkKQogICAgICAgICAgbGV0IGxpc3RSZWYgPSB0aGlzLmRiLmNvbGxlY3Rpb24oImxpc3RzIikuZG9jKGl0ZW0uaWQpCiAgICAgICAgICBsZXQgbXNnUmVmID0gdGhpcy5kYi5jb2xsZWN0aW9uKCJjb21tZW50cyIpLmRvYyhpdGVtLmlkKQoKICAgICAgICAgIHRoaXMuZGlhbG9nLmJ1dHRvbi5wb3NpdGl2ZS5mdW5jID0gYXN5bmMgKCkgPT4gewogICAgICAgICAgICB0aGlzLmRpYWxvZy5idXR0b24ucG9zaXRpdmUuaXNDbGlja2VkID0gdHJ1ZQoKICAgICAgICAgICAgLy8g5ZWG5ZOB44OH44O844K/CiAgICAgICAgICAgIGxldCBpdGVtRGF0YSA9IHsKICAgICAgICAgICAgICByZXBseTogZmlyZWJhc2UuZmlyZXN0b3JlLkZpZWxkVmFsdWUuaW5jcmVtZW50KDEpLAogICAgICAgICAgICAgIHN0YXR1czogMywKICAgICAgICAgICAgICB1cGRhdGVkX2F0OiBub3cKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyDjgrPjg6Hjg7Pjg4jmp4vpgKAKICAgICAgICAgICAgbGV0IG1zZ0RhdGEgPSB7CiAgICAgICAgICAgICAgdWlkOiB0aGlzLnVzZXIudWlkLAogICAgICAgICAgICAgIG1zZzogIuWPluW8leOCkue3oOOCgeWIh+OCiuOBvuOBl+OBn+OAgiIsCiAgICAgICAgICAgICAgY3JlYXRlZF9hdDogTWF0aC5mbG9vciggbmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwICkKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyDosqnlo7Ljg6rjgrnjg4jmm7TmlrAo5YCL5Lq6KQogICAgICAgICAgICBhd2FpdCBidXlSZWYudXBkYXRlKHsKICAgICAgICAgICAgICBbJ2l0ZW1zLicgKyBpbmRleF06IGZpcmViYXNlLmZpcmVzdG9yZS5GaWVsZFZhbHVlLmRlbGV0ZSgpCiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC8vIOiyqeWjsuODquOCueODiOabtOaWsCjlhajkvZMpCiAgICAgICAgICAgIGF3YWl0IGxpc3RSZWYudXBkYXRlKHsKICAgICAgICAgICAgICAuLi5pdGVtRGF0YSAKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLy8g44OB44Oj44OD44OI5pu05pawCiAgICAgICAgICAgIGF3YWl0IG1zZ1JlZi51cGRhdGUoewogICAgICAgICAgICAgIHJlcGx5OiBmaXJlYmFzZS5maXJlc3RvcmUuRmllbGRWYWx1ZS5hcnJheVVuaW9uKG1zZ0RhdGEpCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAvLyDlh7rlk4HmnqDjgpLnqbrjgasKICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMuaXRlbXMsIGluZGV4LCB7CiAgICAgICAgICAgICAgaWQ6ICIiLAogICAgICAgICAgICAgIHN0YXR1czogMSwKICAgICAgICAgICAgICBuYW1lOiAiIiwKICAgICAgICAgICAgICBwcmljZTogIiIsCiAgICAgICAgICAgICAgcmVwbHk6IDAKICAgICAgICAgICAgfSkKCiAgICAgICAgICAgIHRoaXMuZGlhbG9nLmlzU2hvdyA9IGZhbHNlCiAgICAgICAgICAgIHRoaXMuZGlhbG9nLmJ1dHRvbi5wb3NpdGl2ZS5pc0NsaWNrZWQgPSBmYWxzZQogICAgICAgICAgfQogICAgICAgICAgdGhpcy5kaWFsb2cuYnV0dG9uLm5lZ2F0aXZlLmZ1bmMgPSAoKSA9PiB7CiAgICAgICAgICAgIHRoaXMuZGlhbG9nLmlzU2hvdyA9IGZhbHNlCiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5kaWFsb2cuaXNTaG93ID0gdHJ1ZQogICAgICAgICAgYnJlYWsKICAgICAgICB9CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBicmVhawogICAgICB9CiAgICB9LAogICAgY2hhbmdlUHJpY2UoaXRlbSxpbmRleCl7CiAgICAgIHRoaXMuZGlhbG9nLnRpdGxlID0gIm5vdGljZSIKICAgICAgdGhpcy5kaWFsb2cuY29udGVudCA9IGAKICAgICAgICA8cD7lpInmm7Tlvozjga7kvqHmoLzjgpLlhaXlipvjgZfjgabjgY/jgaDjgZXjgYTjgII8L3A+CiAgICAgICAgPGRpdiBjbGFzcz0iaXRlbS1pbnB1dC1jaG9jbyI+CiAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9Im5ld1ByaWNlIiBjbGFzcz0idGV4dC1jaG9jby1kYXJrIiB2YWx1ZT0ke2l0ZW0ucHJpY2V9IG1heGxlbmd0aD0iMTAiPgogICAgICAgIDwvZGl2PgogICAgICBgCiAgICAgIHRoaXMuZGlhbG9nLmJ1dHRvbi5wb3NpdGl2ZS5pc1Nob3cgPSB0cnVlCiAgICAgIHRoaXMuZGlhbG9nLmJ1dHRvbi5uZWdhdGl2ZS5pc1Nob3cgPSB0cnVlCiAgICAgIHRoaXMuZGlhbG9nLmJ1dHRvbi5wb3NpdGl2ZS5mdW5jID0gYXN5bmMgKCkgPT4gewogICAgICAgIGxldCBuZXdQcmljZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXdQcmljZScpLnZhbHVlCiAgICAgICAgaWYobmV3UHJpY2UgIT0gaXRlbS5wcmljZSl7CiAgICAgICAgICB0aGlzLmRpYWxvZy5idXR0b24ucG9zaXRpdmUuaXNDbGlja2VkID0gdHJ1ZQogICAgICAgICAgYXdhaXQgdGhpcy5zZXRQcmljZShpdGVtLGluZGV4LG5ld1ByaWNlKQogICAgICAgICAgdGhpcy5kaWFsb2cuaXNTaG93ID0gZmFsc2UKICAgICAgICAgIHRoaXMuZGlhbG9nLmJ1dHRvbi5wb3NpdGl2ZS5pc0NsaWNrZWQgPSBmYWxzZQogICAgICAgIH1lbHNlewogICAgICAgICAgcmV0dXJuCiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMuZGlhbG9nLmJ1dHRvbi5uZWdhdGl2ZS5mdW5jID0gKCkgPT4gewogICAgICAgIHRoaXMuZGlhbG9nLmlzU2hvdyA9IGZhbHNlCiAgICAgIH0KICAgICAgdGhpcy5kaWFsb2cuaXNTaG93ID0gdHJ1ZQogICAgfSwKICAgIGFzeW5jIHNldFByaWNlKGl0ZW0saW5kZXgsbmV3UHJpY2UpewogICAgICBsZXQgbGlzdFJlZiA9IHRoaXMuZGIuY29sbGVjdGlvbigibGlzdHMiKS5kb2MoaXRlbS5pZCkKICAgICAgbGV0IG1zZ1JlZiA9IHRoaXMuZGIuY29sbGVjdGlvbigiY29tbWVudHMiKS5kb2MoaXRlbS5pZCkKCiAgICAgIGxldCBub3cgPSBmaXJlYmFzZS5maXJlc3RvcmUuRmllbGRWYWx1ZS5zZXJ2ZXJUaW1lc3RhbXAoKQogICAgICBsZXQgaXRlbURhdGEgPSB7CiAgICAgICAgcHJpY2U6IG5ld1ByaWNlLAogICAgICAgIHVwZGF0ZWRfYXQ6IG5vdywKICAgICAgICByZXBseTogZmlyZWJhc2UuZmlyZXN0b3JlLkZpZWxkVmFsdWUuaW5jcmVtZW50KDEpCiAgICAgIH0KCiAgICAgIGxldCBtc2dEYXRhID0gewogICAgICAgIHVpZDogdGhpcy51c2VyLnVpZCwKICAgICAgICBtc2c6IGDkvqHmoLzjga7lpInmm7TjgpLooYzjgYTjgb7jgZfjgZ/jgII8YnI+JHtpdGVtLnByaWNlfSDihpIg44CQJHtuZXdQcmljZX3jgJFgLAogICAgICAgIGNyZWF0ZWRfYXQ6IE1hdGguZmxvb3IoIG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCApCiAgICAgIH0KICAgICAgLy8g6LKp5aOy44Oq44K544OI5pu05pawKOWFqOS9kykKICAgICAgYXdhaXQgbGlzdFJlZi51cGRhdGUoewogICAgICAgICAuLi5pdGVtRGF0YSAKICAgICAgfSkKICAgICAgLy8g5YCk5q615aSJ5pu06YCa55+lCiAgICAgIGF3YWl0IG1zZ1JlZi51cGRhdGUoewogICAgICAgIHJlcGx5OiBmaXJlYmFzZS5maXJlc3RvcmUuRmllbGRWYWx1ZS5hcnJheVVuaW9uKG1zZ0RhdGEpCiAgICAgIH0pOwogICAgICB0aGlzLmRpYWxvZy5pc1Nob3cgPSBmYWxzZQogICAgfSwKICAgIGFzeW5jIHJlZnJlc2goKXsKICAgICAgYXdhaXQgZmlyZWJhc2VDb25maWcub25BdXRoKCkKICAgICAgbGV0IGRhdGEgPSBhd2FpdCB0aGlzLlJlZnJlc2hCdXlMaXN0KCkKICAgICAgLy8g5Yid5pyf5YyWCiAgICAgIGZvcihsZXQgaT0xOyBpPD1kYXRhLmNvdW50OyBpKyspewogICAgICAgIHRoaXMuJHNldCh0aGlzLml0ZW1zLCBpLCB7CiAgICAgICAgICBpZDogIiIsCiAgICAgICAgICBzdGF0dXM6IDEsCiAgICAgICAgICBuYW1lOiAiIiwKICAgICAgICAgIHByaWNlOiAiIiwKICAgICAgICAgIHJlcGx5OiAwCiAgICAgICAgfSkKICAgICAgfQogICAgICAvLyDmm7TmlrAKICAgICAgaWYoZGF0YS5pdGVtcyl7CiAgICAgICAgZm9yKGxldCBpbmRleCBpbiBkYXRhLml0ZW1zKXsKICAgICAgICAgIGxldCBpdGVtUmVmID0gYXdhaXQgZmlyZWJhc2UuZmlyZXN0b3JlKCkuY29sbGVjdGlvbigibGlzdHMiKS5kb2MoZGF0YS5pdGVtc1tpbmRleF0uaWQpCiAgICAgICAgICBsZXQgaXRlbURhdGEgPSBhd2FpdCBpdGVtUmVmLmdldCgpCiAgICAgICAgICB0aGlzLml0ZW1zW2luZGV4XSA9IHsKICAgICAgICAgICAgaWQ6IGl0ZW1EYXRhLmRhdGEoKS5pZCwKICAgICAgICAgICAgc3RhdHVzOiBpdGVtRGF0YS5kYXRhKCkuc3RhdHVzLAogICAgICAgICAgICBuYW1lOiBpdGVtRGF0YS5kYXRhKCkubmFtZSwKICAgICAgICAgICAgcHJpY2U6IGl0ZW1EYXRhLmRhdGEoKS5wcmljZSwKICAgICAgICAgICAgcmVwbHk6IGl0ZW1EYXRhLmRhdGEoKS5yZXBseSwKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuc2V0TGlzdExpc3RlbmVyKGl0ZW1EYXRhLmRhdGEoKS5pZCkKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBzZXRMaXN0TGlzdGVuZXIoaWQpewogICAgICBsZXQgdCA9IHRoaXMKICAgICAgZmlyZWJhc2UuZmlyZXN0b3JlKCkuY29sbGVjdGlvbigibGlzdHMiKS5kb2MoaWQpLm9uU25hcHNob3QoZnVuY3Rpb24gKHF1ZXJ5U25hcHNob3QpIHsKICAgICAgICBsZXQgdXBkYXRlZERhdGEgPSBxdWVyeVNuYXBzaG90LmRhdGEoKQogICAgICAgIGZvcihsZXQgaW5kZXggaW4gdC5pdGVtcykgewogICAgICAgICAgaWYodC5pdGVtc1tpbmRleF0uaWQgPT0gdXBkYXRlZERhdGEuaWQpewogICAgICAgICAgICB0Lml0ZW1zW2luZGV4XSA9IHsKICAgICAgICAgICAgICBpZDogdXBkYXRlZERhdGEuaWQsCiAgICAgICAgICAgICAgc3RhdHVzOiB1cGRhdGVkRGF0YS5zdGF0dXMsCiAgICAgICAgICAgICAgbmFtZTogdXBkYXRlZERhdGEubmFtZSwKICAgICAgICAgICAgICBwcmljZTogdXBkYXRlZERhdGEucHJpY2UsCiAgICAgICAgICAgICAgcmVwbHk6IHVwZGF0ZWREYXRhLnJlcGx5LAogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KQogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIC4uLm1hcEdldHRlcnMoewogICAgICB1c2VyOiAnYXV0aC91c2VyJywKICAgIH0pLAogIH0sCiAgYXN5bmMgbW91bnRlZCgpewogICAgYXdhaXQgdGhpcy5yZWZyZXNoKCkKICB9Cn0K"},{"version":3,"sources":["buy.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"buy.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"table-choco buy\">\n    <table class=\"item-table-choco back-choco pa-1\" cellspacing=\"5\">\n      <thead>\n        <tr class=\"item-th-choco text-choco body-2\">\n          <th>ステータス</th>\n          <th>装備名</th>\n          <th>価格</th>\n          <th>返</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"(item,index) in items\" :key=\"index\" class=\"item-td-choco text-choco\">\n          <td class=\"item-choco\">\n            <div class=\"item-type-choco\">\n              <v-btn color=\"#487DF6\" dark @click=\"setStatus(index,item)\" class=\"button-choco\" :class=\"{'danger': item.status == 2}\">\n                <span>{{STATUS[1][item.status]}}</span>\n              </v-btn>\n            </div>\n          </td>\n          <td>\n            <div class=\"item-input-choco\">\n              <template v-if=\"item.status == 1\">\n                <input type=\"text\" class=\"text-choco-dark\" v-model=\"item.name\">\n              </template>\n              <template v-else>\n                <span class=\"text-choco-dark\">\n                  <template v-if=\"$vuetify.breakpoint.xs\">\n                    {{trimText(item.name,12)}}\n                  </template>\n                  <template v-else>\n                    {{trimText(item.name,30)}}\n                  </template>\n                </span>\n              </template>\n            </div>\n          </td>\n          <td>\n            <div class=\"item-input-choco\">\n              <template v-if=\"item.status == 1\">\n                <input type=\"text\" class=\"text-choco-dark\" v-model=\"item.price\" maxlength=\"10\">\n              </template>\n              <template v-else>\n                <span class=\"text-choco-dark pointer\" maxlength=\"10\" @click=\"changePrice(item,index)\">{{trimText(item.price,5)}}</span>\n              </template>\n            </div>\n          </td>\n          <td>\n            <div class=\"item-input-choco\">\n              <template v-if=\"item.status == 1\">\n                <span class=\"text-choco-dark\">-</span>\n              </template>\n              <template v-else>\n                <span class=\"text-choco-dark link pointer\" @click=\"$emit('showReply', item.id,'lists')\">{{item.reply}}</span>\n              </template>\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <v-row justify=\"center\">\n      <v-dialog\n        v-model=\"dialog.isShow\"\n        max-width=\"500\"\n        width=\"90%\"\n      >\n        <div class=\"modal-choco\">\n          <div class=\"head text-choco pl-2 body-2\">\n            {{dialog.title}}\n          </div>\n          <div class=\"body text-choco-dark pa-2\">\n            <p v-html=\"dialog.content\"></p>\n          </div>\n          <div class=\"footer\">\n            <v-btn v-if=\"dialog.button.positive.isShow\" color=\"#487DF6\" class=\"button-choco\" :class=\"{'pointer-none': dialog.button.positive.isClicked}\" dark @click=\"dialog.button.positive.func()\">\n              <span>OK</span>\n            </v-btn>\n            <v-btn v-if=\"dialog.button.negative.isShow\" color=\"#487DF6\" class=\"button-choco\" dark @click=\"dialog.button.negative.func()\">\n              <span>キャンセル</span>\n            </v-btn>\n          </div>\n        </div>\n      </v-dialog>\n    </v-row>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapGetters, mapMutations, mapActions } from 'vuex'\nimport firebase from 'firebase'\nimport firebaseConfig from '@/plugins/firebase'\n\nexport default {\n  data () {\n    return {\n      dialog: {\n        isShow: false,\n        title: \"\",\n        content: \"\",\n        button: {\n          positive: {\n            isShow: false,\n            isClicked: false,\n            func(){\n\n            }\n          },\n          negative: {\n            isShow: false,\n            func(){\n\n            }\n          }\n        },\n      },\n      count: 0,\n      items: {}\n    }\n  },\n  methods: {\n    setStatus(index,item){\n      switch(item.status){\n        case(1): {\n          this.dialog.title = \"notice\"\n          if(this.is_empty(item.name) || this.is_empty(item.price)){\n            this.dialog.content = `\n            <p>求める装備名、価格を正しく入力してください。</p>\n            `\n            // <div class=\"text-center\">\n            //   <img src=\"${require('@/assets/imgs/berude.png')}\" height=\"100px\">\n            // </div>\n            this.dialog.button.positive.isShow = false\n            this.dialog.button.negative.isShow = true\n            this.dialog.button.negative.func = () => {\n              this.dialog.isShow = false\n            }\n          }else{\n            this.dialog.content = `【${item.name}】を${item.price}<br>で求めます。よろしいですか?`\n            this.dialog.button.positive.isShow = true\n            this.dialog.button.negative.isShow = true\n\n            let itemId = this.db.collection(\"lists\").doc().id\n\n            let now = firebase.firestore.FieldValue.serverTimestamp()\n            let today = Math.floor( new Date().getTime() / 1000 )\n\n            let buyRef = this.db.collection(\"buys\").doc(this.user.uid)\n            let listRef = this.db.collection(\"lists\").doc(itemId)\n            let msgRef = this.db.collection(\"comments\").doc(itemId)\n\n            this.dialog.button.positive.func = async () => {\n              this.dialog.button.positive.isClicked = true\n\n              // 商品データ\n              let itemData = {\n                id: itemId,\n                uid: this.user.uid,\n                status: 2,\n                name: item.name,\n                price: item.price,\n                type: 1,\n                reply: 1,\n                updated_at: now,\n                created_at: now\n              }\n              // コメント構造\n              let msgData = {\n                item: listRef,\n                reply: [\n                  {\n                    uid: this.user.uid,\n                    msg: \"取引を開始しました。\",\n                    created_at: today\n                  }\n                ],\n                good: 0,\n                created_at: now,\n                updated_at: now\n              }\n\n              this.items[index] = {\n                id: itemId,\n                status: 2,\n                name: item.name,\n                price: item.price,\n                reply: 1,\n              }\n\n              // 販売リスト更新(個人)\n              await buyRef.update({\n                ['items.' + index]: listRef\n              })\n              // 販売リスト更新(全体)\n              await listRef.set({ ...itemData })\n              // スレッド作成\n              await msgRef.set({ ...msgData })\n              // リスナー登録\n              this.setListListener(itemId)\n              this.dialog.isShow = false\n\n              this.dialog.button.positive.isClicked = false\n            }\n            this.dialog.button.negative.func = () => {\n              this.dialog.isShow = false\n            }\n          }\n          this.dialog.isShow = true\n          break\n        }\n\n        case(2): {\n          this.dialog.title = \"notice\"\n          this.dialog.content = `【${item.name}】の取引を締め切ります。<br>よろしいですか?`\n          this.dialog.button.positive.isShow = true\n          this.dialog.button.negative.isShow = true\n\n          let now = firebase.firestore.FieldValue.serverTimestamp()\n          let today = Math.floor( new Date().getTime() / 1000 )\n\n          let buyRef = this.db.collection(\"buys\").doc(this.user.uid)\n          let listRef = this.db.collection(\"lists\").doc(item.id)\n          let msgRef = this.db.collection(\"comments\").doc(item.id)\n\n          this.dialog.button.positive.func = async () => {\n            this.dialog.button.positive.isClicked = true\n\n            // 商品データ\n            let itemData = {\n              reply: firebase.firestore.FieldValue.increment(1),\n              status: 3,\n              updated_at: now\n            }\n            // コメント構造\n            let msgData = {\n              uid: this.user.uid,\n              msg: \"取引を締め切りました。\",\n              created_at: Math.floor( new Date().getTime() / 1000 )\n            }\n            // 販売リスト更新(個人)\n            await buyRef.update({\n              ['items.' + index]: firebase.firestore.FieldValue.delete()\n            })\n            // 販売リスト更新(全体)\n            await listRef.update({\n              ...itemData \n            })\n            // チャット更新\n            await msgRef.update({\n              reply: firebase.firestore.FieldValue.arrayUnion(msgData)\n            });\n            // 出品枠を空に\n            this.$set(this.items, index, {\n              id: \"\",\n              status: 1,\n              name: \"\",\n              price: \"\",\n              reply: 0\n            })\n\n            this.dialog.isShow = false\n            this.dialog.button.positive.isClicked = false\n          }\n          this.dialog.button.negative.func = () => {\n            this.dialog.isShow = false\n          }\n\n          this.dialog.isShow = true\n          break\n        }\n\n        default:\n          break\n      }\n    },\n    changePrice(item,index){\n      this.dialog.title = \"notice\"\n      this.dialog.content = `\n        <p>変更後の価格を入力してください。</p>\n        <div class=\"item-input-choco\">\n          <input type=\"text\" id=\"newPrice\" class=\"text-choco-dark\" value=${item.price} maxlength=\"10\">\n        </div>\n      `\n      this.dialog.button.positive.isShow = true\n      this.dialog.button.negative.isShow = true\n      this.dialog.button.positive.func = async () => {\n        let newPrice = document.getElementById('newPrice').value\n        if(newPrice != item.price){\n          this.dialog.button.positive.isClicked = true\n          await this.setPrice(item,index,newPrice)\n          this.dialog.isShow = false\n          this.dialog.button.positive.isClicked = false\n        }else{\n          return\n        }\n      }\n      this.dialog.button.negative.func = () => {\n        this.dialog.isShow = false\n      }\n      this.dialog.isShow = true\n    },\n    async setPrice(item,index,newPrice){\n      let listRef = this.db.collection(\"lists\").doc(item.id)\n      let msgRef = this.db.collection(\"comments\").doc(item.id)\n\n      let now = firebase.firestore.FieldValue.serverTimestamp()\n      let itemData = {\n        price: newPrice,\n        updated_at: now,\n        reply: firebase.firestore.FieldValue.increment(1)\n      }\n\n      let msgData = {\n        uid: this.user.uid,\n        msg: `価格の変更を行いました。<br>${item.price} → 【${newPrice}】`,\n        created_at: Math.floor( new Date().getTime() / 1000 )\n      }\n      // 販売リスト更新(全体)\n      await listRef.update({\n         ...itemData \n      })\n      // 値段変更通知\n      await msgRef.update({\n        reply: firebase.firestore.FieldValue.arrayUnion(msgData)\n      });\n      this.dialog.isShow = false\n    },\n    async refresh(){\n      await firebaseConfig.onAuth()\n      let data = await this.RefreshBuyList()\n      // 初期化\n      for(let i=1; i<=data.count; i++){\n        this.$set(this.items, i, {\n          id: \"\",\n          status: 1,\n          name: \"\",\n          price: \"\",\n          reply: 0\n        })\n      }\n      // 更新\n      if(data.items){\n        for(let index in data.items){\n          let itemRef = await firebase.firestore().collection(\"lists\").doc(data.items[index].id)\n          let itemData = await itemRef.get()\n          this.items[index] = {\n            id: itemData.data().id,\n            status: itemData.data().status,\n            name: itemData.data().name,\n            price: itemData.data().price,\n            reply: itemData.data().reply,\n          }\n          this.setListListener(itemData.data().id)\n        }\n      }\n    },\n    setListListener(id){\n      let t = this\n      firebase.firestore().collection(\"lists\").doc(id).onSnapshot(function (querySnapshot) {\n        let updatedData = querySnapshot.data()\n        for(let index in t.items) {\n          if(t.items[index].id == updatedData.id){\n            t.items[index] = {\n              id: updatedData.id,\n              status: updatedData.status,\n              name: updatedData.name,\n              price: updatedData.price,\n              reply: updatedData.reply,\n            }\n          }\n        }\n      })\n    }\n  },\n  computed: {\n    ...mapGetters({\n      user: 'auth/user',\n    }),\n  },\n  async mounted(){\n    await this.refresh()\n  }\n}\n</script>\n\n<style lang=\"scss\">\n$base_color_1: #FFEAC8;\n$base_color_2: #B1A3A7;\n$base_color_3: #E1CABB;\n$base_color_4: #1E2E58;\n.buy{\n  .item-th-choco{\n    th{\n      &:first-of-type{\n        // width: 40px;\n      }\n      &:nth-of-type(3){\n      }\n      &:last-of-type{\n        width: 40px;\n      }\n    }\n  }\n  .item-type-choco{\n    &>button{\n      // width: 45px;\n      // min-width: 45px !important;\n    }\n  }\n  .item-input-choco{\n    display: inline-block;\n    border-radius: 6px;\n    background: $base_color_2;\n    width: 100%;\n    height: 40px;\n    font-size: 14px;\n    white-space: nowrap;\n    input,span{\n      display: flex;\n      align-items: center;\n      width: 100%;\n      height: 40px;\n      padding: 5px;\n      padding-left: 10px;\n      background-color: $base_color_3;\n      border-radius: 5px;\n    }\n  }\n}\n</style>"]}]}